import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

// --- 1. Student POJO (Plain Old Java Object) Class ---
// Represents a single student record
class Student {
    private int id;
    private String name;
    private int age;
    private String grade;

    // Constructor for new students (ID will be auto-generated by DB)
    public Student(String name, int age, String grade) {
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    // Constructor for existing students (with ID from DB)
    public Student(int id, String name, int age, String grade) {
        this.id = id;
        this.name = name;
        this.age = age;
        this.grade = grade;
    }

    // Getters
    public int getId() { return id; }
    public String getName() { return name; }
    public int getAge() { return age; }
    public String getGrade() { return grade; }

    // Setters (if you want to make the object mutable after creation)
    // For this example, we'll assume setters are needed for update operations on the object itself.
    public void setId(int id) { this.id = id; }
    public void setName(String name) { this.name = name; }
    public void setAge(int age) { this.age = age; }
    public void setGrade(String grade) { this.grade = grade; }

    @Override
    public String toString() {
        return "Student [ID=" + id + ", Name='" + name + "', Age=" + age + ", Grade='" + grade + "']";
    }
}

// --- 2. StudentDAO (Data Access Object) Class ---
// Handles all database operations related to the Student entity
class StudentDAO {
    // JDBC URL for SQLite database.
    private static final String JDBC_URL = "jdbc:sqlite:javatest.db";

    public StudentDAO() {
        // Ensure the database file exists or is created with the table
        try (Connection connection = DriverManager.getConnection(JDBC_URL);
             Statement statement = connection.createStatement()) {
            String createTableSQL = "CREATE TABLE IF NOT EXISTS students (" +
                    "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                    "name TEXT NOT NULL," +
                    "age INTEGER," +
                    "grade TEXT)";
            statement.execute(createTableSQL);
            // System.out.println("Ensured 'students' table exists.");
        } catch (SQLException e) {
            System.err.println("Error ensuring database/table setup: " + e.getMessage());
        }
    }

    /**
     * Inserts a new student record into the database.
     * Uses PreparedStatement for security and efficiency.
     *
     * @param student The Student object to insert.
     * @return true if insertion was successful, false otherwise.
     */
    public boolean insertStudent(Student student) {
        String SQL_INSERT = "INSERT INTO students (name, age, grade) VALUES (?, ?, ?)";
        try (Connection conn = DriverManager.getConnection(JDBC_URL);
             // Use RETURN_GENERATED_KEYS to get the auto-generated ID back
             PreparedStatement pstmt = conn.prepareStatement(SQL_INSERT, Statement.RETURN_GENERATED_KEYS)) {

            pstmt.setString(1, student.getName());
            pstmt.setInt(2, student.getAge());
            pstmt.setString(3, student.getGrade());

            int affectedRows = pstmt.executeUpdate(); // Execute the INSERT query

            if (affectedRows > 0) {
                // Retrieve the auto-generated ID (for PRIMARY KEY AUTOINCREMENT)
                try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {
                    if (generatedKeys.next()) {
                        student.setId(generatedKeys.getInt(1)); // Set the ID back to the Student object
                    }
                }
                return true;
            }
        } catch (SQLException e) {
            System.err.println("Error inserting student: " + e.getMessage());
            // e.printStackTrace(); // For debugging
        }
        return false;
    }

    /**
     * Updates an existing student record in the database.
     * Uses PreparedStatement for security and efficiency.
     *
     * @param student The Student object with updated details (ID must be present).
     * @return true if update was successful, false otherwise.
     */
    public boolean updateStudent(Student student) {
        // Note: We update based on 'id', which is the primary key.
        String SQL_UPDATE = "UPDATE students SET name = ?, age = ?, grade = ? WHERE id = ?";
        try (Connection conn = DriverManager.getConnection(JDBC_URL);
             PreparedStatement pstmt = conn.prepareStatement(SQL_UPDATE)) {

            pstmt.setString(1, student.getName());
            pstmt.setInt(2, student.getAge());
            pstmt.setString(3, student.getGrade());
            pstmt.setInt(4, student.getId()); // Set the ID for the WHERE clause

            int affectedRows = pstmt.executeUpdate(); // Execute the UPDATE query
            return affectedRows > 0; // Returns true if at least one row was updated
        } catch (SQLException e) {
            System.err.println("Error updating student: " + e.getMessage());
            // e.printStackTrace(); // For debugging
        }
        return false;
    }

    /**
     * Retrieves a student by their ID. Helper method for verification.
     *
     * @param id The ID of the student to retrieve.
     * @return A Student object if found, null otherwise.
     */
    public Student getStudentById(int id) {
        String SQL_SELECT_BY_ID = "SELECT id, name, age, grade FROM students WHERE id = ?";
        try (Connection conn = DriverManager.getConnection(JDBC_URL);
             PreparedStatement pstmt = conn.prepareStatement(SQL_SELECT_BY_ID)) {

            pstmt.setInt(1, id);
            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) { // If a row is found
                    return new Student(
                            rs.getInt("id"),
                            rs.getString("name"),
                            rs.getInt("age"),
                            rs.getString("grade")
                    );
                }
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving student by ID: " + e.getMessage());
        }
        return null; // Student not found or error occurred
    }

    /**
     * Retrieves all student records. Helper method for verification.
     *
     * @return A List of Student objects.
     */
    public List<Student> getAllStudents() {
        List<Student> students = new ArrayList<>();
        String SQL_SELECT_ALL = "SELECT id, name, age, grade FROM students ORDER BY id";
        try (Connection conn = DriverManager.getConnection(JDBC_URL);
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(SQL_SELECT_ALL)) {

            while (rs.next()) {
                students.add(new Student(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getInt("age"),
                        rs.getString("grade")
                ));
            }
        } catch (SQLException e) {
            System.err.println("Error retrieving all students: " + e.getMessage());
        }
        return students;
    }
}

// --- 3. Main Class to demonstrate DML operations ---
public class JdbcDmlOperationsExample {

    public static void main(String[] args) {
        System.out.println("JDBC INSERT and UPDATE Operations Example");
        System.out.println("----------------------------------------\n");

        StudentDAO studentDAO = new StudentDAO();

        // Display initial state of the table
        System.out.println("--- Initial Students in DB ---");
        studentDAO.getAllStudents().forEach(System.out::println);
        System.out.println();

        // --- Insert new records ---
        System.out.println("--- Inserting New Students ---");
        Student newStudent1 = new Student("Emily White", 23, "B-");
        if (studentDAO.insertStudent(newStudent1)) {
            System.out.println("Inserted: " + newStudent1);
        } else {
            System.out.println("Failed to insert: " + newStudent1.getName());
        }

        Student newStudent2 = new Student("Frank Green", 20, "C+");
        if (studentDAO.insertStudent(newStudent2)) {
            System.out.println("Inserted: " + newStudent2);
        } else {
            System.out.println("Failed to insert: " + newStudent2.getName());
        }
        System.out.println();


        // Display students after insertion
        System.out.println("--- Students After Insertion ---");
        studentDAO.getAllStudents().forEach(System.out::println);
        System.out.println();

        // --- Update an existing record ---
        System.out.println("--- Updating an Existing Student ---");
        // We'll update Bob Johnson (assuming his ID is 2, or you can retrieve it)
        // Let's first retrieve Bob's ID to be safe, if we don't know it beforehand.
        // For demonstration, let's assume Bob's ID is 2 based on previous example
        // (if you followed the previous example exactly).
        // For robustness, you'd query by name or some other unique attribute first.

        // Find an existing student to update (e.g., student with ID 2)
        Student studentToUpdate = studentDAO.getStudentById(2); // Assuming Bob Johnson was ID 2
        if (studentToUpdate != null) {
            System.out.println("Before update: " + studentToUpdate);
            studentToUpdate.setAge(24); // Bob got older
            studentToUpdate.setGrade("A"); // Bob's grade improved
            studentToUpdate.setName("Robert Johnson"); // Bob changed his name slightly

            if (studentDAO.updateStudent(studentToUpdate)) {
                System.out.println("Successfully updated: " + studentToUpdate.getName());
                // Verify the update
                Student updatedStudent = studentDAO.getStudentById(studentToUpdate.getId());
                System.out.println("After update verification: " + updatedStudent);
            } else {
                System.out.println("Failed to update student with ID: " + studentToUpdate.getId());
            }
        } else {
            System.out.println("Student with ID 2 not found for update demonstration.");
        }
        System.out.println();


        // Display final state of the table
        System.out.println("--- Final Students in DB ---");
        studentDAO.getAllStudents().forEach(System.out::println);
        System.out.println();

        System.out.println("JDBC DML operations example finished.");
    }
}